// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static int freeList, heap;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let freeList = heap;
		let heap[0] = 0; //next
		let heap[1] = 14334; //length
		return this;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return null;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
		var int block;
		
		let block = freeList;
		while ((~(ram[block] = 0)) & (ram[block + 1] < (size + 2))) {
			let block = ram[block];
		}
		if (ram[block + 1] < (size + 2)) {
			return -1;
		} else {
			let ram[block + 1] = ram[block + 1] - (size + 2);
			let block = block + ram[block + 1];
			let ram[block] = block;
			let ram[block + 1] = size;
		}
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int block;
		let block = freeList;
		while (~(ram[block] = 0)) {
			let block = ram[block];
		}
		let ram[block] = o[0];
		let o[0] = 0;
		return null;
    }
}
